Docker-MySQL Image scripts: This scripts will use the information sent by the end-user from the front end in order to create a new MySQL or Mongo dB Image and perform all the required operations such as create a docker container for the specific type of DB, create users with specific privileges, set and reset passwords, delete users, delete databases. 

Docker-MySQL part:

File name: MySQL_Create_Container_DB_USER.bash:
#!/bin/bash
EXPECTED_ARGS=5
E_BADARGS=65
# This file will create a new Docker container then waits 1 minute and creates DB and User, set User password and privileges

CONTAINER_INSTANCE_id="$1"
ROOT_PASSWORD="$2"
# database name doesn’t need single quotes around
DATABASE="$3"
SOURCE="'%'"
USER="'$4'"
PASSWORD="'$5'"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE, ROOT_PASSWORD, DATABASE_NAME, USER_NAME, USER_PASSWORD"
  exit $E_BADARGS
fi

# creates a new MySQL Docker Container
docker run --name $CONTAINER_INSTANCE_id -e MYSQL_ROOT_PASSWORD=$ROOT_PASSWORD -d mysql:5.7.11

sleep 1m

# creates a new DB in the specified Docker container
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "CREATE DATABASE $DATABASE;"


# Creates user with no privileges 
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "GRANT USAGE ON *.* TO ${USER}@${SOURCE} IDENTIFIED BY ${PASSWORD};"

# Grants privileges to new user on specific database
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "GRANT CREATE, SELECT, UPDATE, INSERT, DELETE, DROP ON ${DATABASE}.* TO ${USER}@${SOURCE};"

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

# The following script is different from the previous one in the sense that it is used to create a new DB user but not a new Docker container

File name: MySQL_Create_new_USER.bash:

#!/bin/bash
EXPECTED_ARGS=5
E_BADARGS=65
# This file creates a new DB if doesn’t exist, it also creates a new User and sets his password and privileges

CONTAINER_INSTANCE_id="$1"
ROOT_PASSWORD="$2"
# database name doesn’t need single quotes
DATABASE="$3"
SOURCE="'%'"
USER="'$4'"
PASSWORD="'$5'"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE, ROOT_PASSWORD, DATABASE_NAME, USER_NAME, USER_PASSWORD"
  exit $E_BADARGS
fi

# Creates a new if doesn’t exist  in the specified Docker container
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DATABASE;"

#creates user with no privileges 
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "GRANT USAGE ON *.* TO ${USER}@${SOURCE} IDENTIFIED BY ${PASSWORD};"

# grants privileges to new user on specific database
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "GRANT CREATE, SELECT, UPDATE, INSERT, DELETE, DROP ON ${DATABASE}.* TO ${USER}@${SOURCE};"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#The following script is used to reset the user’s password
 File Name: Change_password.bash:
#!/bin/bash -x
EXPECTED_ARGS=4
E_BADARGS=65
CONTAINER_INSTANCE_id="$1"
ROOT_PASSWORD="$2"
SOURCE="'%'"
USER="'$3'"
PASSWORD="'$4'"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE, ROOT_PASSWORD, DATABASE_NAME, USER_NAME, USER_PASSWORD"
  exit $E_BADARGS
fi

# This uses root to Update user password
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "ALTER USER ${USER}@${SOURCE} IDENTIFIED WITH mysql_native_password BY  ${PASSWORD};"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#The following code will delete a dB user
#File Name: Mysql_delete_user.bash:

#!/bin/bash
EXPECTED_ARGS=3
E_BADARGS=65

CONTAINER_INSTANCE_id="$1"
ROOT_PASSWORD="$2"
SOURCE="'%'"
USER="'$3'"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 userName"
  exit $E_BADARGS
fi

# DROP/DELETE USER
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "DROP USER ${USER}@${SOURCE};"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#The following script will drop the specified data base
#File name: MySQL_drop_Db.bash

#!/bin/bash -x
EXPECTED_ARGS=3
E_BADARGS=65
CONTAINER_INSTANCE_id="$1"
ROOT_PASSWORD="$2"
DATABASE="$3"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE, ROOT_PASSWORD, DATABASE_NAME, USER_NAME, USER_PASSWORD"
  exit $E_BADARGS
fi

# Delete database
docker exec -it $CONTAINER_INSTANCE_id /usr/bin/mysql -h 127.0.0.1 -uroot -p$ROOT_PASSWORD -e "DROP DATABASE IF EXISTS $DATABASE;"

==============================================================================================================================================================================================================================================================================================================================================

#Docker-Mongo Db Part:
#MongoDB_Create_Container_DB_USER.bash:

#!/bin/bash -x
EXPECTED_ARGS=4
E_BADARGS=65
# databases = collections - collections (user dbs) are inside the test db
# users are stored inside the admin db --> system. Users

CONTAINER_INSTANCE_id="$1"
#ROOT_PASSWORD=""
USER="'$2'"
PASSWORD="'$3'"
DB="$4"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE,USER_NAME, USER_PASSWORD, DATABASE_NAME"
  exit $E_BADARGS
fi

# creates a new Mongo DB Docker Container
docker run --name $CONTAINER_INSTANCE_id -d mongo
sleep 10s

# Creates new Mongo Db user for specific container, sets user password and role
docker exec -it $CONTAINER_INSTANCE_id mongo --eval  "db.createUser({ user: $USER, pwd: $PASSWORD, roles: [ { role: 'userAdminAnyDatabase', db: 'admin' } ] });"

 # Creates a new Collection in the specified Docker container and inside test db
docker exec -it $CONTAINER_INSTANCE_id mongo --eval "db.createCollection('$DB')"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#File name: Mongo_Create_newUSer.bash:

#!/bin/bash -x
EXPECTED_ARGS=3
E_BADARGS=65

# dabases = collections; and collections (user dbs) are inside the test db
# users are stored inside the admin db --> system. Users

CONTAINER_INSTANCE_id="$1"
#ROOT_PASSWORD=""
USER="'$2'"
PASSWORD="'$3'"

# print error message showing the necessary parameters if script has not received required number of parameters 
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE,USER_NAME, USER_PASSWORD, DATABASE_NAME"
  exit $E_BADARGS
fi

# Creates new mongo user and sets password and user role 
docker exec -it $CONTAINER_INSTANCE_id mongo --eval  "db.createUser({ user: $USER, pwd: $PASSWORD, roles: [ { role: 'userAdminAnyDatabase', db: 'admin' } ] });"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#File name: Mongo_changeUserPassword.bash:

#!/bin/bash -x
EXPECTED_ARGS=3
E_BADARGS=65

# dabases = collections; and collections (user dbs) are inside the test db
# users are stored inside the admin db --> system.users

CONTAINER_INSTANCE_id="$1"
#ROOT_PASSWORD=""
USER="'$2'"
PASSWORD="'$3'"

# print error message showing the necessary parameters if script has not received required number of parameters
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE,USER_NAME, USER_NAME, NEW_PASS"
  exit $E_BADARGS
fi

# change user password
docker exec -it $CONTAINER_INSTANCE_id mongo --eval "db.updateUser($USER,  { pwd: $PASSWORD})"

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#File name: delete_mongodb_user:

#!/bin/bash -x
EXPECTED_ARGS=2
E_BADARGS=65

# dabases = collections – and collections (user dbs) are inside the test db
# users are stored inside the admin db --> system.users

CONTAINER_INSTANCE_id="$1"
#ROOT_PASSWORD=""
USER="'$2'"

# print error message showing the necessary parameters if script has not received required number of parameters
if [ $# -ne $EXPECTED_ARGS ]
then
  echo "Usage: $0 CONTAINER_INSTANCE,USER_NAME"
  exit $E_BADARGS
fi


# Removes mongo db user
docker exec -it $CONTAINER_INSTANCE_id mongo --eval "db.dropUser($USER)"














